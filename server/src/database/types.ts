/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from 'kysely'

export type Generated<T> =
  T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>

export type Numeric = ColumnType<string, number | string, number | string>

export interface Activity {
  cadence: number | null
  calories: number | null
  distance: number | null
  duration: number | null
  heartrate: number | null
  id: Generated<number>
  origin: string
  originId: number
  speedAverage: number | null
  startTime: string
  title: string | null
  type: string
  userId: number
}

export interface GenerationTask {
  activityId: number
  id: Generated<number>
  taskId: string
  userId: number
}

export interface Genre {
  id: Generated<number>
  name: string
}

export interface Song {
  activityId: number
  audioUrl: string
  id: Generated<number>
  imageUrl: string | null
  originId: string
  prompt: string | null
  taskId: number
  title: string | null
  userId: number
}

export interface StravaTokens {
  accessToken: string
  expiresAt: number
  id: Generated<number>
  refreshToken: string
  stravaUserId: number
  userId: number
}

export interface Trait {
  complexityMultiplier: Numeric
  energyMultiplier: Numeric
  genreBias: Numeric
  genreId: number
  id: Generated<number>
  moodMultiplier: Numeric
  name: string
  tempoMultiplier: Numeric
}

export interface User {
  email: string
  firstName: string
  id: Generated<number>
  lastName: string
  password: string
}

export interface UserTraits {
  id: Generated<number>
  traitId: number
  userId: number
}

export interface DB {
  activity: Activity
  generationTask: GenerationTask
  genre: Genre
  song: Song
  stravaTokens: StravaTokens
  trait: Trait
  user: User
  userTraits: UserTraits
}
